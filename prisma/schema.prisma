// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Multi-tenant core models
model Tenant {
    id        String   @id @default(cuid())
    name      String   @unique
    slug      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users       User[]
    departments Department[]
    resources   Resource[]
    events      Event[]

    @@index([slug])
}

model Department {
    id        String   @id @default(cuid())
    tenantId  String
    tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    name      String
    code      String // e.g., "CSE", "ECE"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    resources Resource[]
    events    Event[]

    @@unique([tenantId, code])
    @@index([tenantId])
}

model Resource {
    id           String       @id @default(cuid())
    tenantId     String
    tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    departmentId String?
    department   Department?  @relation(fields: [departmentId], references: [id])
    name         String
    type         ResourceType
    capacity     Int          @default(1)
    description  String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    events Event[]

    @@index([tenantId])
    @@index([departmentId])
}

model Event {
    id           String      @id @default(cuid())
    tenantId     String
    tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    resourceId   String
    resource     Resource    @relation(fields: [resourceId], references: [id])
    departmentId String?
    department   Department? @relation(fields: [departmentId], references: [id])
    createdById  String
    createdBy    User        @relation(fields: [createdById], references: [id])

    title       String
    description String?
    startTime   DateTime
    endTime     DateTime
    status      EventStatus @default(PENDING)
    visibility  Visibility  @default(PUBLIC)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([tenantId, resourceId, startTime, endTime])
    @@index([tenantId])
    @@index([resourceId])
    @@index([createdById])
    @@index([status, visibility])
}

enum Role {
    SUPER_ADMIN
    ORG_ADMIN
    DEPT_HOD
    DEPT_COORD
    CLUB_MEMBER
    RESOURCE_MANAGER
}

enum UserState {
    PENDING
    ACTIVE
    SUSPENDED
}

enum ResourceType {
    CLASSROOM
    LAB
    AUDITORIUM
    SPORTS_FACILITY
    EQUIPMENT
    OTHER
}

enum EventStatus {
    PENDING
    APPROVED
    REJECTED
    CANCELLED
}

enum Visibility {
    PUBLIC
    PRIVATE
    DEPARTMENT_ONLY
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    tenantId      String
    tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    googleId      String    @unique
    role          Role      @default(CLUB_MEMBER)
    state         UserState @default(PENDING)
    
    // Extended profile information
    firstName     String?
    lastName      String?
    phoneNumber   String?
    studentId     String?   // For students
    employeeId    String?   // For staff/faculty
    year          String?   // Academic year for students
    department    String?   // Department name
    designation   String?   // Job title for staff/faculty
    reasonForAccess String? // Why they need access
    
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    sessions      Session[]
    events        Event[]
    accountRequest AccountRequest?

    @@index([tenantId])
    @@index([email])
    @@index([googleId])
    @@index([state, role])
    @@index([studentId])
    @@index([employeeId])
}

model AccountRequest {
    id              String   @id @default(cuid())
    userId          String   @unique
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tenantId        String
    
    // Personal Information
    firstName       String
    lastName        String
    email           String
    phoneNumber     String
    
    // Academic/Professional Information
    userType        UserType
    studentId       String?
    employeeId      String?
    year            String?     // Academic year for students
    semester        String?     // Current semester
    department      String
    course          String?     // Course name for students
    designation     String?     // Job title for staff/faculty
    
    // Access Request Details
    reasonForAccess String      // Why they need access
    intendedUse     String      // How they plan to use the system
    requestedRole   Role        @default(CLUB_MEMBER)
    
    // Supporting Documents (file paths/URLs)
    idProofDocument String?     // Student ID card, employee ID, etc.
    letterDocument  String?     // Letter from HOD/supervisor
    
    // Admin Review
    status          RequestStatus @default(PENDING)
    reviewedBy      String?     // Admin who reviewed
    reviewedAt      DateTime?
    reviewComments  String?     // Admin comments
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([tenantId])
    @@index([status])
    @@index([userType])
    @@index([department])
}

enum UserType {
    STUDENT
    FACULTY
    STAFF
    RESEARCHER
    GUEST
}

enum RequestStatus {
    PENDING
    UNDER_REVIEW
    APPROVED
    REJECTED
    REQUIRES_CLARIFICATION
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
