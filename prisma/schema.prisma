// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ========================================================================
// Single-Tenant Auth & RBAC for Jai Hind College
// ========================================================================

model College {
    id           Int          @id @default(1)
    name         String
    slug         String       @unique
    logoUrl      String?
    address      String?
    city         String?
    contactEmail String?
    contactPhone String?
    createdAt    DateTime     @default(now())
    // relations
    users        User[]
    departments  Department[]
    buildings    Building[]
    resources    Resource[]
    events       Event[]
}

model User {
    id            String      @id @default(cuid())
    email         String      @unique
    password      String? // bcrypt hash â€“ null for Google-only
    googleId      String?     @unique
    name          String?
    phone         String?
    photoUrl      String?
    role          Role        @default(CLUB_MEMBER)
    state         UserState   @default(PENDING)
    deptId        String?
    collegeId     Int         @default(1)
    college       College     @relation(fields: [collegeId], references: [id])
    department    Department? @relation(fields: [deptId], references: [id])
    createdEvents Event[]     @relation("EventCreator")
    hodOf         Department? @relation("HOD")
    createdAt     DateTime    @default(now())

    // NextAuth relations
    accounts Account[]
    sessions Session[]
}

enum Role {
    SUPER_ADMIN
    ORG_ADMIN
    DEPT_HOD
    DEPT_COORD
    CLUB_MEMBER
    RESOURCE_MANAGER
}

enum UserState {
    PENDING
    ACTIVE
    SUSPENDED
}

model Department {
    id        String  @id @default(cuid())
    name      String  @unique
    hodId     String? @unique
    collegeId Int     @default(1)
    college   College @relation(fields: [collegeId], references: [id])
    hod       User?   @relation("HOD", fields: [hodId], references: [id])
    users     User[]
}

model Building {
    id        String  @id @default(cuid())
    name      String
    floors    Int
    collegeId Int     @default(1)
    college   College @relation(fields: [collegeId], references: [id])
    rooms     Room[]
}

model Room {
    id         String     @id @default(cuid())
    buildingId String
    building   Building   @relation(fields: [buildingId], references: [id])
    name       String
    capacity   Int
    type       RoomType
    events     Event[]
    resources  Resource[] @relation("RoomResources")
}

enum RoomType {
    CLASSROOM
    LAB
    AUDITORIUM
    CONFERENCE
}

model Resource {
    id        String  @id @default(cuid())
    name      String
    quantity  Int
    notes     String?
    collegeId Int     @default(1)
    college   College @relation(fields: [collegeId], references: [id])
    rooms     Room[]  @relation("RoomResources")
}

model Event {
    id          String      @id @default(cuid())
    createdById String
    creator     User        @relation("EventCreator", fields: [createdById], references: [id])
    title       String
    startTime   DateTime
    endTime     DateTime
    visibility  Visibility
    status      EventStatus @default(PENDING)
    roomId      String?
    room        Room?       @relation(fields: [roomId], references: [id])
    collegeId   Int         @default(1)
    college     College     @relation(fields: [collegeId], references: [id])

    @@unique([roomId, startTime, endTime])
}

enum Visibility {
    PUBLIC
    PRIVATE
}

enum EventStatus {
    APPROVED
    PENDING
    REJECTED
}

// NextAuth models
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
